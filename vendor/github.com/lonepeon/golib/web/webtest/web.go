// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lonepeon/golib/web (interfaces: CurrentAuthenticatedUserStorage,Handler,Context)

// Package webtest is a generated GoMock package.
package webtest

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	web "github.com/lonepeon/golib/web"
)

// MockCurrentAuthenticatedUserStorage is a mock of CurrentAuthenticatedUserStorage interface.
type MockCurrentAuthenticatedUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCurrentAuthenticatedUserStorageMockRecorder
}

// MockCurrentAuthenticatedUserStorageMockRecorder is the mock recorder for MockCurrentAuthenticatedUserStorage.
type MockCurrentAuthenticatedUserStorageMockRecorder struct {
	mock *MockCurrentAuthenticatedUserStorage
}

// NewMockCurrentAuthenticatedUserStorage creates a new mock instance.
func NewMockCurrentAuthenticatedUserStorage(ctrl *gomock.Controller) *MockCurrentAuthenticatedUserStorage {
	mock := &MockCurrentAuthenticatedUserStorage{ctrl: ctrl}
	mock.recorder = &MockCurrentAuthenticatedUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrentAuthenticatedUserStorage) EXPECT() *MockCurrentAuthenticatedUserStorageMockRecorder {
	return m.recorder
}

// AuthenticateUsername mocks base method.
func (m *MockCurrentAuthenticatedUserStorage) AuthenticateUsername(arg0 http.ResponseWriter, arg1 *http.Request, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateUsername", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthenticateUsername indicates an expected call of AuthenticateUsername.
func (mr *MockCurrentAuthenticatedUserStorageMockRecorder) AuthenticateUsername(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateUsername", reflect.TypeOf((*MockCurrentAuthenticatedUserStorage)(nil).AuthenticateUsername), arg0, arg1, arg2)
}

// Clear mocks base method.
func (m *MockCurrentAuthenticatedUserStorage) Clear(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockCurrentAuthenticatedUserStorageMockRecorder) Clear(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockCurrentAuthenticatedUserStorage)(nil).Clear), arg0, arg1)
}

// CurrentUsername mocks base method.
func (m *MockCurrentAuthenticatedUserStorage) CurrentUsername(arg0 *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentUsername", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentUsername indicates an expected call of CurrentUsername.
func (mr *MockCurrentAuthenticatedUserStorageMockRecorder) CurrentUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentUsername", reflect.TypeOf((*MockCurrentAuthenticatedUserStorage)(nil).CurrentUsername), arg0)
}

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockHandler) Handle(arg0 web.Context, arg1 http.ResponseWriter, arg2 *http.Request) web.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", arg0, arg1, arg2)
	ret0, _ := ret[0].(web.Response)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockHandlerMockRecorder) Handle(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockHandler)(nil).Handle), arg0, arg1, arg2)
}

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// AddData mocks base method.
func (m *MockContext) AddData(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddData", arg0, arg1)
}

// AddData indicates an expected call of AddData.
func (mr *MockContextMockRecorder) AddData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddData", reflect.TypeOf((*MockContext)(nil).AddData), arg0, arg1)
}

// AddFlash mocks base method.
func (m *MockContext) AddFlash(arg0 web.FlashMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFlash", arg0)
}

// AddFlash indicates an expected call of AddFlash.
func (mr *MockContextMockRecorder) AddFlash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlash", reflect.TypeOf((*MockContext)(nil).AddFlash), arg0)
}

// InternalServerErrorResponse mocks base method.
func (m *MockContext) InternalServerErrorResponse(arg0 string, arg1 ...interface{}) web.Response {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InternalServerErrorResponse", varargs...)
	ret0, _ := ret[0].(web.Response)
	return ret0
}

// InternalServerErrorResponse indicates an expected call of InternalServerErrorResponse.
func (mr *MockContextMockRecorder) InternalServerErrorResponse(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalServerErrorResponse", reflect.TypeOf((*MockContext)(nil).InternalServerErrorResponse), varargs...)
}

// NotFoundResponse mocks base method.
func (m *MockContext) NotFoundResponse(arg0 string, arg1 ...interface{}) web.Response {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NotFoundResponse", varargs...)
	ret0, _ := ret[0].(web.Response)
	return ret0
}

// NotFoundResponse indicates an expected call of NotFoundResponse.
func (mr *MockContextMockRecorder) NotFoundResponse(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFoundResponse", reflect.TypeOf((*MockContext)(nil).NotFoundResponse), varargs...)
}

// Redirect mocks base method.
func (m *MockContext) Redirect(arg0 http.ResponseWriter, arg1 int, arg2 string) web.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Redirect", arg0, arg1, arg2)
	ret0, _ := ret[0].(web.Response)
	return ret0
}

// Redirect indicates an expected call of Redirect.
func (mr *MockContextMockRecorder) Redirect(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirect", reflect.TypeOf((*MockContext)(nil).Redirect), arg0, arg1, arg2)
}

// Response mocks base method.
func (m *MockContext) Response(arg0 int, arg1 string, arg2 map[string]interface{}) web.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Response", arg0, arg1, arg2)
	ret0, _ := ret[0].(web.Response)
	return ret0
}

// Response indicates an expected call of Response.
func (mr *MockContextMockRecorder) Response(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockContext)(nil).Response), arg0, arg1, arg2)
}

// StdCtx mocks base method.
func (m *MockContext) StdCtx() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StdCtx")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// StdCtx indicates an expected call of StdCtx.
func (mr *MockContextMockRecorder) StdCtx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StdCtx", reflect.TypeOf((*MockContext)(nil).StdCtx))
}

// Vars mocks base method.
func (m *MockContext) Vars(arg0 *http.Request) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vars", arg0)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Vars indicates an expected call of Vars.
func (mr *MockContextMockRecorder) Vars(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vars", reflect.TypeOf((*MockContext)(nil).Vars), arg0)
}
