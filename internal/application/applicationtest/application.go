// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lonepeon/sport/internal/application (interfaces: Application)

// Package applicationtest is a generated GoMock package.
package applicationtest

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/lonepeon/sport/internal/domain"
)

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// DeleteRunningSession mocks base method.
func (m *MockApplication) DeleteRunningSession(arg0 context.Context, arg1 domain.RunningActivitySlug) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRunningSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRunningSession indicates an expected call of DeleteRunningSession.
func (mr *MockApplicationMockRecorder) DeleteRunningSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRunningSession", reflect.TypeOf((*MockApplication)(nil).DeleteRunningSession), arg0, arg1)
}

// GetRunningSession mocks base method.
func (m *MockApplication) GetRunningSession(arg0 context.Context, arg1 domain.RunningActivitySlug) (domain.RunningActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunningSession", arg0, arg1)
	ret0, _ := ret[0].(domain.RunningActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunningSession indicates an expected call of GetRunningSession.
func (mr *MockApplicationMockRecorder) GetRunningSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunningSession", reflect.TypeOf((*MockApplication)(nil).GetRunningSession), arg0, arg1)
}

// ListRunningSessions mocks base method.
func (m *MockApplication) ListRunningSessions(arg0 context.Context) ([]domain.RunningActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunningSessions", arg0)
	ret0, _ := ret[0].([]domain.RunningActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRunningSessions indicates an expected call of ListRunningSessions.
func (mr *MockApplicationMockRecorder) ListRunningSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunningSessions", reflect.TypeOf((*MockApplication)(nil).ListRunningSessions), arg0)
}

// TrackRunningSession mocks base method.
func (m *MockApplication) TrackRunningSession(arg0 context.Context, arg1 time.Time, arg2 io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackRunningSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrackRunningSession indicates an expected call of TrackRunningSession.
func (mr *MockApplicationMockRecorder) TrackRunningSession(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackRunningSession", reflect.TypeOf((*MockApplication)(nil).TrackRunningSession), arg0, arg1, arg2)
}
